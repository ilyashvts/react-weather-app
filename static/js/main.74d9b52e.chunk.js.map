{"version":3,"sources":["assets/sun.svg","assets/rain.svg","assets/cloudy-day.svg","assets/sunrise.svg","assets/sunset.svg","assets/bg.jpg","redux/weatherReducer.js","redux/types.js","redux/mainReducer.js","redux/rootReducer.js","redux/actions.js","components/WeatherIcon.js","components/WeatherBoard.js","components/inputLocation.js","components/Error.js","App.js","index.js"],"names":["module","exports","initState","location","String","date","current","Object","daily","Array","weatherReducer","state","action","type","payload","isLocation","isLoading","isError","mainReducer","chooseLocation","rootReducer","combineReducers","main","weather","WEATHER_URL","mainData","WEATHER_API_KEY","Days","DaysShort","Month","DATE","Date","getDay","getDate","getMonth","getFullYear","getWeather","prop","storageItem","localStorage","getItem","setItem","JSON","stringify","parse","console","log","dispatch","a","axios","get","params","appid","q","units","currentWeather","forecastWeather","data","forecast","sunrise","sys","getHours","getMinutes","sunset","newForecast","list","filter","elem","dt","map","day","temperature","Math","round","temp","name","country","feelsLike","feels_like","pressure","humidity","wind","speed","WeatherIcon","props","className","src","require","alt","connect","key","mapDispatchToProps","setLocation","e","target","value","placeholder","onChange","id","onClick","Error","useEffect","store","createStore","compose","applyMiddleware","thunk","logger","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74d9b52e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.eacc3127.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.f2998250.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day.fbc9f7f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.1bc312cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.db4f302e.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.2cbba09e.jpg\";","import {GET_WEATHER} from './types'\n\nconst initState = {\n    location: String,\n    date: String,\n    current: Object,\n    daily: Array\n}\n\nconst weatherReducer = (state = initState, action) => {\n    switch (action.type) {\n        case GET_WEATHER:\n            return {...state, ...action.payload}\n\n        default: return state\n    }\n}\n\nexport default weatherReducer","export const GET_WEATHER = 'GET_WEATHER'\n\nexport const SET_LOCATION = 'SET_LOCATION'\n\nexport const CHOOSE_LOCATION = 'CHOOSE_LOCATION'\n\nexport const SET_LOADING = 'SET_LOADING'\n\nexport const ERROR = 'ERROR'","import {CHOOSE_LOCATION, ERROR, GET_WEATHER, SET_LOADING, SET_LOCATION} from './types'\n\nconst initState = {\n    location: '',\n    isLocation: false,\n    isLoading: true,\n    isError: false\n}\n\nconst mainReducer = (state = initState, action) => {\n    switch (action.type) {\n\n        case SET_LOADING:\n            return {...state, isLoading: true}\n\n        case CHOOSE_LOCATION:\n            return {...state, chooseLocation: true}\n\n        case SET_LOCATION:\n            return {...state, location: action.payload}\n\n        case GET_WEATHER:\n            return {...state, isLoading: false, isLocation: true, isError: false}\n        case ERROR:\n            return {...state, isError: true}\n\n        default: return state\n    }\n}\n\nexport default mainReducer","import {combineReducers} from 'redux'\nimport weatherReducer from './weatherReducer'\nimport mainReducer from './mainReducer'\n\nconst rootReducer = combineReducers({\n    main: mainReducer,\n    weather: weatherReducer\n})\n\nexport default rootReducer","import {ERROR, GET_WEATHER, SET_LOADING, SET_LOCATION} from './types'\nimport axios from 'axios'\nimport mainData from './main.data.json'\n\nconst {WEATHER_URL, WEATHER_API_KEY, Days, DaysShort, Month} = mainData\nconst DATE = new Date()\nconst date = `${Days[DATE.getDay()]}, ${DATE.getDate()} ${Month[DATE.getMonth()]} ${DATE.getFullYear()}`\n\nexport const setLoading = () => {\n    return {\n        type: SET_LOADING\n    }\n}\n\nexport const getWeather = prop => {\n    setLoading()\n\n    const storageItem = localStorage.getItem('location')\n    let location\n\n    if(prop){\n        location = prop\n        localStorage.setItem('location', JSON.stringify(prop))\n    } else if (storageItem) {\n        location = JSON.parse(storageItem)\n        console.log(location)\n    } else {\n        return {\n            type: 'No location'\n        }\n    }\n\n    return async dispatch => {\n\n        try {\n            const currentWeather = await axios.get(`${WEATHER_URL}weather`, {\n                params: {\n                    appid: WEATHER_API_KEY,\n                    q: location,\n                    units: 'metric'\n                }\n            })\n\n            const forecastWeather = await axios.get(`${WEATHER_URL}forecast`, {\n                params: {\n                    appid: WEATHER_API_KEY,\n                    q: location,\n                    units: 'metric'\n                }\n            })\n\n\n\n            const current = currentWeather.data\n            const forecast = forecastWeather.data\n\n            const sunrise = `${new Date(current.sys.sunrise * 1000).getHours()}:${new Date(current.sys.sunrise * 1000).getMinutes()}`\n            const sunset = `${new Date(current.sys.sunset * 1000).getHours()}:${new Date(current.sys.sunset * 1000).getMinutes()}`\n\n            const newForecast = forecast.list.filter(elem => {\n                const ddd = new Date(elem.dt * 1000).getHours()\n                return ddd === 9\n            })\n\n            const daily = newForecast.map(elem => {\n                return {\n                    day: `${DaysShort[new Date(elem.dt * 1000).getDay()]}`,\n                    temperature: Math.round(elem.main.temp),\n                    weather: elem.weather[0].main\n                }\n            })\n\n            const payload = {\n                location: `${current.name}, ${current.sys.country}`,\n                date,\n                current: {\n                    temperature: Math.round(current.main.temp),\n                    weather: current.weather[0].main,\n                    feelsLike: Math.round(current.main.feels_like),\n                    pressure: current.main.pressure,\n                    humidity: current.main.humidity,\n                    wind: current.wind.speed,\n                    sunrise,\n                    sunset\n                },\n                daily\n            }\n\n            return dispatch({\n                type: GET_WEATHER,\n                payload\n            })\n\n        } catch (e) {\n            return dispatch({\n                type: ERROR\n            })\n        }\n    }\n}\n\nexport const setLocation = e => {\n    return {\n        type: SET_LOCATION,\n        payload: e.target.value\n    }\n}","import React from 'react'\n\nconst WeatherIcon = props => {\n    const {weather, className} = props\n    switch (weather) {\n        case 'Clear':\n            return (\n                <img src={require('../assets/sun.svg')} alt=\"sun\" className={className}/>\n            )\n        case 'Rain':\n            return (\n                <img src={require('../assets/rain.svg')} alt=\"rain\" className={className}/>\n            )\n        case 'Clouds':\n            return (\n                <img src={require('../assets/cloudy-day.svg')} alt=\"cloudy-day\" className={className}/>\n            )\n        default: return (<span>No icon</span>)\n    }\n}\n\nexport default WeatherIcon","import React from 'react'\nimport {connect} from 'react-redux'\nimport WeatherIcon from './WeatherIcon'\nimport {MdLocationOn} from 'react-icons/all'\n\nconst WeatherBoard = props => {\n    const {isLocation} = props\n    const {location, date, current, daily} = props.weather\n\n    if(isLocation) {\n        return (\n            <>\n                <div className=\"current\">\n                    <div className=\"current__main\">\n                        <span className=\"location\"><MdLocationOn/>{location}</span>\n                        <span className=\"date\">{date}</span>\n                        <span className=\"temperature\">{current.temperature}&#8451;</span>\n                    </div>\n\n                    <WeatherIcon className={'current__icon'} weather={current.weather}/>\n\n                    <div className=\"current__secondary\">\n                        <div className=\"info\">\n                            <div className=\"info__inner\">\n                                <span className=\"info__title\">Feels like:</span>\n                                <span className=\"info__value\">{current.feelsLike}&#8451;</span>\n                            </div>\n                            <div className=\"info__inner\">\n                                <span className=\"info__title\">Pressure:</span>\n                                <span className=\"info__value\">{current.pressure} mm</span>\n                            </div>\n                            <div className=\"info__inner\">\n                                <span className=\"info__title\">Humidity:</span>\n                                <span className=\"info__value\">{current.humidity}%</span>\n                            </div>\n                            <div className=\"info__inner\">\n                                <span className=\"info__title\">Wind:</span>\n                                <span className=\"info__value\">{current.wind} m/s</span>\n                            </div>\n                        </div>\n\n                        <div className=\"sunstate\">\n                            <div className=\"sunrise\">\n                                <img src={require('../assets/sunrise.svg')} alt=\"\" className='sunstate__icon'/>\n                                {current.sunrise}\n                            </div>\n                            <div className=\"sunset\">\n                                <img src={require('../assets/sunset.svg')} alt=\"\" className='sunstate__icon'/>\n                                {current.sunset}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"daily\">\n                    {daily.map((elem, key) => {\n                        return (\n                            <div className=\"daily__inner\" key={key}>\n                                <span className=\"daily__day\">{elem.day}</span>\n                                <WeatherIcon className={'daily__icon'} weather={elem.weather}/>\n                                <span className=\"daily__temperature\">{elem.temperature}&#8451;</span>\n                            </div>\n                        )\n                    })}\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <h5>Please, enter the city name</h5>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {isLocation} = state.main\n    const {weather} = state\n    return {weather, isLocation}\n}\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherBoard)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {getWeather, setLocation} from '../redux/actions'\n\nconst InputLocation = props => {\n\n    const {location, setLocation, getWeather} = props\n\n    return (\n        <>\n            <h1 className=\"\">Your current weather</h1>\n            <div className=\"input-group mt-3\">\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Enter the city name\"\n                    value={location}\n                    onChange={setLocation}\n                />\n\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-secondary\"\n                            type=\"button\"\n                            id=\"button-addon2\"\n                            onClick={() => {getWeather(location)}}\n                        >Search\n                        </button>\n                    </div>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {location} = state.main\n    return {location}\n}\n\nconst mapDispatchToProps = {\n    setLocation,\n    getWeather\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputLocation)","import React from 'react'\n\nconst Error = () => {\n    return (\n        <h2>City not found</h2>\n    )\n}\n\nexport default Error","import React, {useEffect} from 'react'\nimport {connect} from 'react-redux'\nimport {getWeather} from './redux/actions'\nimport WeatherBoard from './components/WeatherBoard'\nimport InputLocation from './components/inputLocation'\nimport Error from './components/Error'\n\nconst App = props => {\n    const {getWeather, isLoading, isError} = props\n\n    useEffect(() => {\n        getWeather()\n    }, [])\n\n    return (\n        <div className=\"weather\">\n            <img className='weather__bg' src={require('./assets/bg.jpg')} alt=\"\"/>\n\n            <div className=\"container mt-5\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <InputLocation />\n                    </div>\n\n                    <div className=\"col-12 h-100 mt-5\">\n                        <div className=\"weather__board\">\n                            {isLoading || isError ? <Error/> : <WeatherBoard/>}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const {isLoading, isError} = state.main\n    return {isLoading, isError}\n}\n\nconst mapDispatchToProps = {\n    getWeather,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {applyMiddleware, compose, createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport {logger} from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport rootReducer from './redux/rootReducer'\nimport App from './App'\nimport './style.scss'\n\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(thunk, logger),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'))"],"sourceRoot":""}